version: '3.9'
services:
  database:
    image: postgres:16-alpine
    container_name: dsatracker-db
    restart: always
    environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
    volumes:
    - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  backend:
    image: dsatracker-api:latest
    container_name: dsatracker-api
    env_file:
      - ./backend/.env.prod
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:4000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  frontend:
    image: dsatracker-frontend:latest
    container_name: dsatracker-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  pgdata: